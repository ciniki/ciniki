Development Install
-------------------
These instructions are only for those allowed commit privileges to checkin changes to the core code.

Create SSH Key 
+-------------
In order to do development work, you must download the code as a registered github user to the ciniki project. 

Follow the instructions at http://help.github.com/mac-set-up-git/ to setup you ssh key and github token.  These
will allow you to download and contribute back to the code.
 
Clone the ciniki repository
+--------------------------
Checkout all the code from github.

git clone git@github.com:ciniki/ciniki.git
cd ciniki
git submodule update --init

Initialize all the submodules to have the master checked out and available for editing.  This also
adds in the remote push of git@github.com:ciniki/api-<module>.git so the changes can be commited
and pushed back to github.

./scripts/dev-init.sh

Commit, Push, Pull
+-----------------
To commit all changes in all modules with one commit msg:

./scripts/commit.sh 'msg'

To push all changes up to github:

./scripts/push.sh

To pull the recent code for all modules:

./scripts/pull.sh

Workflow
+-------
The following workflow is recommended while working on the code

Update the code to the latest from the repo.
./scripts/pull.sh

Make changes to code, then commit and push. It's a good idea to pull
after the push to update all the submodules.
./scripts/commit.sh 'commit msg'
./scripts/push.sh
./scripts/pull.sh

Adding a new submodule
+---------------------
First, create the repo on github under ciniki.

Then, add submodule to the local ciniki project directory.

cd ciniki/
git submodule add git://github.com/ciniki/api-<modulename>.git site/ciniki-api/<modulename>
cd site/ciniki-api/<modulename>
git remote add push git@github.com:ciniki/api-<modulename>.git 

Documentation
+------------
If you want to see API documentation, you'll need to setup the documentation module.

FIXME: Add info here
